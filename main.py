#üë§
import os
from dotenv import load_dotenv

import asyncio
import logging

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# from api_token import API_TOKEN
from database import create_tables, add_contact, get_contacts, update_contact_username, delete_contact

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
API_TOKEN = os.getenv("API_TOKEN")

if not API_TOKEN:
    raise ValueError("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env –µ—Å—Ç—å API_TOKEN.")


logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()


class AddUsername(StatesGroup):
    waiting_for_username = State()


class ContactForm(StatesGroup):
    last_name = State()
    first_name = State()
    phone_number = State()
    username = State()


# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")],
        [KeyboardButton(text="–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã")],
        [KeyboardButton(text="üìé –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã
cancel_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True
)

# –í—ã–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
create_tables()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)


# ‚úÖ 1. –ù–∞—á–∞–ª–æ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
async def add_contact_start(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ—à–ª—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.set_state(ContactForm.last_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–∞:", reply_markup=cancel_keyboard)


# ‚úÖ 2. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
@dp.message(ContactForm.last_name)
async def process_last_name(message: Message, state: FSMContext):
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        return await cancel_add_contact(message, state)

    await state.update_data(last_name=message.text)
    await state.set_state(ContactForm.first_name)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:")


@dp.message(ContactForm.first_name)
async def process_first_name(message: Message, state: FSMContext):
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        return await cancel_add_contact(message, state)

    await state.update_data(first_name=message.text)
    await state.set_state(ContactForm.phone_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞:")


@dp.message(ContactForm.phone_number)
async def process_phone_number(message: Message, state: FSMContext):
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        return await cancel_add_contact(message, state)

    await state.update_data(phone_number=message.text)
    await state.set_state(ContactForm.username)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –≤ Telegram (–µ—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '-'):")


@dp.message(ContactForm.username)
async def process_username(message: Message, state: FSMContext):
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        return await cancel_add_contact(message, state)

    user_data = await state.get_data()

    last_name = user_data["last_name"]
    first_name = user_data["first_name"]
    phone_number = user_data["phone_number"]
    username = message.text if message.text != "-" else None

    add_contact(
        user_id=message.from_user.id,
        telegram_id=message.from_user.id,
        phone_number=phone_number,
        first_name=first_name,
        last_name=last_name,
        username=username
    )

    await message.answer(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                         f"üìû {phone_number}\n"
                         f"üë§ {first_name} {last_name or ''}\n"
                         f"üîó {username if username else '–ù–µ—Ç –Ω–∏–∫–∞'}",
                         reply_markup=main_keyboard)

    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å


# ‚úÖ 3. –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def cancel_add_contact(message: Message, state: FSMContext):
    await state.clear()  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data({})  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã
    await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)


# ‚úÖ 4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ üìé
@dp.message(F.text == "üìé –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞")
async def ask_for_contact(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ —Å–∫—Ä–µ–ø–∫—É \n(üìé -> –ö–æ–Ω—Ç–∞–∫—Ç).")


@dp.message(F.contact)
async def import_contact(message: Message, state: FSMContext):
    contact = message.contact
    telegram_id = contact.user_id if contact.user_id else None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –±–µ–∑ –Ω–∏–∫–∞
    add_contact(
        user_id=message.from_user.id,
        telegram_id=telegram_id,
        phone_number=contact.phone_number,
        first_name=contact.first_name,
        last_name=contact.last_name if contact.last_name else None,
        username=None  # –ù–∏–∫ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–π
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∏–∫–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–∏–∫", callback_data=f"add_username_{contact.phone_number}")]
    ])

    await message.answer(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç {contact.first_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏–∫?", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("add_username_"))
async def ask_username(callback: types.CallbackQuery, state: FSMContext):
    phone_number = callback.data.split("_")[2]
    await state.update_data(phone_number=phone_number)

    await state.set_state(AddUsername.waiting_for_username)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username:")
    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É


@dp.message(AddUsername.waiting_for_username)
async def save_username(message: Message, state: FSMContext):
    data = await state.get_data()
    phone_number = data.get("phone_number")

    if not message.text.startswith("@"):
        return await message.answer("‚ùå –ù–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑–µ
    update_contact_username(phone_number, message.text)

    await message.answer(f"‚úÖ –ù–∏–∫ {message.text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# ‚úÖ 5. –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
@dp.message(F.text == "–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
async def show_contacts(message: Message):
    contacts = get_contacts(message.from_user.id)

    if not contacts:
        await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.")
    else:
        response = "üìú *–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:*\n"
        for i, (phone, first_name, last_name, username) in enumerate(contacts, 1):
            response += f"\nüë§ {i}. {first_name} {last_name or ''}\nüìû {phone}\n"
            if username:
                response += f"üîó {username}\n"

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="start_delete_contact")]
        ])

        await message.answer(response, reply_markup=keyboard, parse_mode="Markdown")


@dp.callback_query(F.data == "start_delete_contact")
async def start_deleting_contacts(callback: types.CallbackQuery):
    contacts = get_contacts(callback.from_user.id)

    if not contacts:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
    for phone, first_name, last_name, username in contacts:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_contact_{phone}")]
        ])

        text = (f"üë§ {first_name} {last_name or ''}\n"
                f"üìû {phone}\n"
                f"üîó {username if username else '–ù–µ—Ç –Ω–∏–∫–∞'}")

        await callback.message.answer(text, reply_markup=keyboard)

    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É


@dp.callback_query(F.data.startswith("delete_contact_"))
async def delete_contact_callback(callback: types.CallbackQuery):
    phone_number = callback.data.split("_")[2]

    delete_contact(phone_number, callback.from_user.id)

    await callback.message.edit_text("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É–¥–∞–ª–µ–Ω!")  # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞
    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())
